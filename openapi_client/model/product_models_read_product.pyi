# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProductModelsReadProduct(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A product.
    """


    class MetaOapg:
        
        class properties:
            ProductId = schemas.Int32Schema
            ArticleNumber = schemas.StrSchema
            
            
            class Names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            DateCreated = schemas.DateTimeSchema
            DateUpdated = schemas.DateTimeSchema
            Active = schemas.BoolSchema
            PurchasePrice = schemas.Float64Schema
            PurchasePriceCurrency = schemas.StrSchema
            
            
            class ShortTexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ShortTexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            
            
            class LongTexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LongTexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            
            
            class TechTexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TechTexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            
            
            class Items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductModelsReadProductItem']:
                        return ProductModelsReadProductItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductModelsReadProductItem'], typing.List['ProductModelsReadProductItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductModelsReadProductItem':
                    return super().__getitem__(i)
            
            
            class Prices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PriceListModelsReadPriceListPrice']:
                        return PriceListModelsReadPriceListPrice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PriceListModelsReadPriceListPrice'], typing.List['PriceListModelsReadPriceListPrice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Prices':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PriceListModelsReadPriceListPrice':
                    return super().__getitem__(i)
            
            
            class Categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CategoryModelsReadCategory']:
                        return CategoryModelsReadCategory
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CategoryModelsReadCategory'], typing.List['CategoryModelsReadCategory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Categories':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CategoryModelsReadCategory':
                    return super().__getitem__(i)
            
            
            class Images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductModelsReadImage']:
                        return ProductModelsReadImage
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductModelsReadImage'], typing.List['ProductModelsReadImage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Images':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductModelsReadImage':
                    return super().__getitem__(i)
            BrandId = schemas.Int32Schema
            BrandName = schemas.StrSchema
            SupplierId = schemas.Int32Schema
            SupplierName = schemas.StrSchema
            
            
            class ParameterValues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductParameterModelsReadProductParameterValue']:
                        return ProductParameterModelsReadProductParameterValue
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductParameterModelsReadProductParameterValue'], typing.List['ProductParameterModelsReadProductParameterValue']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ParameterValues':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductParameterModelsReadProductParameterValue':
                    return super().__getitem__(i)
            
            
            class Variants(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VariantModelsReadVariant']:
                        return VariantModelsReadVariant
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['VariantModelsReadVariant'], typing.List['VariantModelsReadVariant']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Variants':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VariantModelsReadVariant':
                    return super().__getitem__(i)
            
            
            class Markets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MarketModelsMarket']:
                        return MarketModelsMarket
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MarketModelsMarket'], typing.List['MarketModelsMarket']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Markets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MarketModelsMarket':
                    return super().__getitem__(i)
            Vat = schemas.Float64Schema
            PrimaryImage = schemas.StrSchema
            FreightClassId = schemas.Int32Schema
            IntrastatCode = schemas.StrSchema
            CountryOfOrigin = schemas.StrSchema
            VariantGroupId = schemas.Int32Schema
            VatId = schemas.Int32Schema
            ExternalId = schemas.StrSchema
            ActivationDate = schemas.DateTimeSchema
            
            
            class Feeds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductModelsReadFeedMembership']:
                        return ProductModelsReadFeedMembership
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductModelsReadFeedMembership'], typing.List['ProductModelsReadFeedMembership']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Feeds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductModelsReadFeedMembership':
                    return super().__getitem__(i)
            
            
            class Urls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductModelsReadProductUrl']:
                        return ProductModelsReadProductUrl
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductModelsReadProductUrl'], typing.List['ProductModelsReadProductUrl']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Urls':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductModelsReadProductUrl':
                    return super().__getitem__(i)
            MainCategoryId = schemas.Int32Schema
            
            
            class RelatedProducts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductModelsReadRelatedProduct']:
                        return ProductModelsReadRelatedProduct
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductModelsReadRelatedProduct'], typing.List['ProductModelsReadRelatedProduct']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'RelatedProducts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductModelsReadRelatedProduct':
                    return super().__getitem__(i)
            __annotations__ = {
                "ProductId": ProductId,
                "ArticleNumber": ArticleNumber,
                "Names": Names,
                "DateCreated": DateCreated,
                "DateUpdated": DateUpdated,
                "Active": Active,
                "PurchasePrice": PurchasePrice,
                "PurchasePriceCurrency": PurchasePriceCurrency,
                "ShortTexts": ShortTexts,
                "LongTexts": LongTexts,
                "TechTexts": TechTexts,
                "Items": Items,
                "Prices": Prices,
                "Categories": Categories,
                "Images": Images,
                "BrandId": BrandId,
                "BrandName": BrandName,
                "SupplierId": SupplierId,
                "SupplierName": SupplierName,
                "ParameterValues": ParameterValues,
                "Variants": Variants,
                "Markets": Markets,
                "Vat": Vat,
                "PrimaryImage": PrimaryImage,
                "FreightClassId": FreightClassId,
                "IntrastatCode": IntrastatCode,
                "CountryOfOrigin": CountryOfOrigin,
                "VariantGroupId": VariantGroupId,
                "VatId": VatId,
                "ExternalId": ExternalId,
                "ActivationDate": ActivationDate,
                "Feeds": Feeds,
                "Urls": Urls,
                "MainCategoryId": MainCategoryId,
                "RelatedProducts": RelatedProducts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProductId"]) -> MetaOapg.properties.ProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ArticleNumber"]) -> MetaOapg.properties.ArticleNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Names"]) -> MetaOapg.properties.Names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DateCreated"]) -> MetaOapg.properties.DateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DateUpdated"]) -> MetaOapg.properties.DateUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Active"]) -> MetaOapg.properties.Active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PurchasePrice"]) -> MetaOapg.properties.PurchasePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PurchasePriceCurrency"]) -> MetaOapg.properties.PurchasePriceCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShortTexts"]) -> MetaOapg.properties.ShortTexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LongTexts"]) -> MetaOapg.properties.LongTexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TechTexts"]) -> MetaOapg.properties.TechTexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Items"]) -> MetaOapg.properties.Items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Prices"]) -> MetaOapg.properties.Prices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Categories"]) -> MetaOapg.properties.Categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Images"]) -> MetaOapg.properties.Images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BrandId"]) -> MetaOapg.properties.BrandId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BrandName"]) -> MetaOapg.properties.BrandName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupplierId"]) -> MetaOapg.properties.SupplierId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupplierName"]) -> MetaOapg.properties.SupplierName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ParameterValues"]) -> MetaOapg.properties.ParameterValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Variants"]) -> MetaOapg.properties.Variants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Markets"]) -> MetaOapg.properties.Markets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Vat"]) -> MetaOapg.properties.Vat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PrimaryImage"]) -> MetaOapg.properties.PrimaryImage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FreightClassId"]) -> MetaOapg.properties.FreightClassId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IntrastatCode"]) -> MetaOapg.properties.IntrastatCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CountryOfOrigin"]) -> MetaOapg.properties.CountryOfOrigin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VariantGroupId"]) -> MetaOapg.properties.VariantGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VatId"]) -> MetaOapg.properties.VatId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExternalId"]) -> MetaOapg.properties.ExternalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActivationDate"]) -> MetaOapg.properties.ActivationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Feeds"]) -> MetaOapg.properties.Feeds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Urls"]) -> MetaOapg.properties.Urls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MainCategoryId"]) -> MetaOapg.properties.MainCategoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RelatedProducts"]) -> MetaOapg.properties.RelatedProducts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ProductId", "ArticleNumber", "Names", "DateCreated", "DateUpdated", "Active", "PurchasePrice", "PurchasePriceCurrency", "ShortTexts", "LongTexts", "TechTexts", "Items", "Prices", "Categories", "Images", "BrandId", "BrandName", "SupplierId", "SupplierName", "ParameterValues", "Variants", "Markets", "Vat", "PrimaryImage", "FreightClassId", "IntrastatCode", "CountryOfOrigin", "VariantGroupId", "VatId", "ExternalId", "ActivationDate", "Feeds", "Urls", "MainCategoryId", "RelatedProducts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProductId"]) -> typing.Union[MetaOapg.properties.ProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ArticleNumber"]) -> typing.Union[MetaOapg.properties.ArticleNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Names"]) -> typing.Union[MetaOapg.properties.Names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DateCreated"]) -> typing.Union[MetaOapg.properties.DateCreated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DateUpdated"]) -> typing.Union[MetaOapg.properties.DateUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Active"]) -> typing.Union[MetaOapg.properties.Active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PurchasePrice"]) -> typing.Union[MetaOapg.properties.PurchasePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PurchasePriceCurrency"]) -> typing.Union[MetaOapg.properties.PurchasePriceCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShortTexts"]) -> typing.Union[MetaOapg.properties.ShortTexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LongTexts"]) -> typing.Union[MetaOapg.properties.LongTexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TechTexts"]) -> typing.Union[MetaOapg.properties.TechTexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Items"]) -> typing.Union[MetaOapg.properties.Items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Prices"]) -> typing.Union[MetaOapg.properties.Prices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Categories"]) -> typing.Union[MetaOapg.properties.Categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Images"]) -> typing.Union[MetaOapg.properties.Images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BrandId"]) -> typing.Union[MetaOapg.properties.BrandId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BrandName"]) -> typing.Union[MetaOapg.properties.BrandName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupplierId"]) -> typing.Union[MetaOapg.properties.SupplierId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupplierName"]) -> typing.Union[MetaOapg.properties.SupplierName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ParameterValues"]) -> typing.Union[MetaOapg.properties.ParameterValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Variants"]) -> typing.Union[MetaOapg.properties.Variants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Markets"]) -> typing.Union[MetaOapg.properties.Markets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Vat"]) -> typing.Union[MetaOapg.properties.Vat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PrimaryImage"]) -> typing.Union[MetaOapg.properties.PrimaryImage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FreightClassId"]) -> typing.Union[MetaOapg.properties.FreightClassId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IntrastatCode"]) -> typing.Union[MetaOapg.properties.IntrastatCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CountryOfOrigin"]) -> typing.Union[MetaOapg.properties.CountryOfOrigin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VariantGroupId"]) -> typing.Union[MetaOapg.properties.VariantGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VatId"]) -> typing.Union[MetaOapg.properties.VatId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExternalId"]) -> typing.Union[MetaOapg.properties.ExternalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActivationDate"]) -> typing.Union[MetaOapg.properties.ActivationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Feeds"]) -> typing.Union[MetaOapg.properties.Feeds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Urls"]) -> typing.Union[MetaOapg.properties.Urls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MainCategoryId"]) -> typing.Union[MetaOapg.properties.MainCategoryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RelatedProducts"]) -> typing.Union[MetaOapg.properties.RelatedProducts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ProductId", "ArticleNumber", "Names", "DateCreated", "DateUpdated", "Active", "PurchasePrice", "PurchasePriceCurrency", "ShortTexts", "LongTexts", "TechTexts", "Items", "Prices", "Categories", "Images", "BrandId", "BrandName", "SupplierId", "SupplierName", "ParameterValues", "Variants", "Markets", "Vat", "PrimaryImage", "FreightClassId", "IntrastatCode", "CountryOfOrigin", "VariantGroupId", "VatId", "ExternalId", "ActivationDate", "Feeds", "Urls", "MainCategoryId", "RelatedProducts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ProductId: typing.Union[MetaOapg.properties.ProductId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ArticleNumber: typing.Union[MetaOapg.properties.ArticleNumber, str, schemas.Unset] = schemas.unset,
        Names: typing.Union[MetaOapg.properties.Names, list, tuple, schemas.Unset] = schemas.unset,
        DateCreated: typing.Union[MetaOapg.properties.DateCreated, str, datetime, schemas.Unset] = schemas.unset,
        DateUpdated: typing.Union[MetaOapg.properties.DateUpdated, str, datetime, schemas.Unset] = schemas.unset,
        Active: typing.Union[MetaOapg.properties.Active, bool, schemas.Unset] = schemas.unset,
        PurchasePrice: typing.Union[MetaOapg.properties.PurchasePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PurchasePriceCurrency: typing.Union[MetaOapg.properties.PurchasePriceCurrency, str, schemas.Unset] = schemas.unset,
        ShortTexts: typing.Union[MetaOapg.properties.ShortTexts, list, tuple, schemas.Unset] = schemas.unset,
        LongTexts: typing.Union[MetaOapg.properties.LongTexts, list, tuple, schemas.Unset] = schemas.unset,
        TechTexts: typing.Union[MetaOapg.properties.TechTexts, list, tuple, schemas.Unset] = schemas.unset,
        Items: typing.Union[MetaOapg.properties.Items, list, tuple, schemas.Unset] = schemas.unset,
        Prices: typing.Union[MetaOapg.properties.Prices, list, tuple, schemas.Unset] = schemas.unset,
        Categories: typing.Union[MetaOapg.properties.Categories, list, tuple, schemas.Unset] = schemas.unset,
        Images: typing.Union[MetaOapg.properties.Images, list, tuple, schemas.Unset] = schemas.unset,
        BrandId: typing.Union[MetaOapg.properties.BrandId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        BrandName: typing.Union[MetaOapg.properties.BrandName, str, schemas.Unset] = schemas.unset,
        SupplierId: typing.Union[MetaOapg.properties.SupplierId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SupplierName: typing.Union[MetaOapg.properties.SupplierName, str, schemas.Unset] = schemas.unset,
        ParameterValues: typing.Union[MetaOapg.properties.ParameterValues, list, tuple, schemas.Unset] = schemas.unset,
        Variants: typing.Union[MetaOapg.properties.Variants, list, tuple, schemas.Unset] = schemas.unset,
        Markets: typing.Union[MetaOapg.properties.Markets, list, tuple, schemas.Unset] = schemas.unset,
        Vat: typing.Union[MetaOapg.properties.Vat, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PrimaryImage: typing.Union[MetaOapg.properties.PrimaryImage, str, schemas.Unset] = schemas.unset,
        FreightClassId: typing.Union[MetaOapg.properties.FreightClassId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IntrastatCode: typing.Union[MetaOapg.properties.IntrastatCode, str, schemas.Unset] = schemas.unset,
        CountryOfOrigin: typing.Union[MetaOapg.properties.CountryOfOrigin, str, schemas.Unset] = schemas.unset,
        VariantGroupId: typing.Union[MetaOapg.properties.VariantGroupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        VatId: typing.Union[MetaOapg.properties.VatId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ExternalId: typing.Union[MetaOapg.properties.ExternalId, str, schemas.Unset] = schemas.unset,
        ActivationDate: typing.Union[MetaOapg.properties.ActivationDate, str, datetime, schemas.Unset] = schemas.unset,
        Feeds: typing.Union[MetaOapg.properties.Feeds, list, tuple, schemas.Unset] = schemas.unset,
        Urls: typing.Union[MetaOapg.properties.Urls, list, tuple, schemas.Unset] = schemas.unset,
        MainCategoryId: typing.Union[MetaOapg.properties.MainCategoryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        RelatedProducts: typing.Union[MetaOapg.properties.RelatedProducts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductModelsReadProduct':
        return super().__new__(
            cls,
            *_args,
            ProductId=ProductId,
            ArticleNumber=ArticleNumber,
            Names=Names,
            DateCreated=DateCreated,
            DateUpdated=DateUpdated,
            Active=Active,
            PurchasePrice=PurchasePrice,
            PurchasePriceCurrency=PurchasePriceCurrency,
            ShortTexts=ShortTexts,
            LongTexts=LongTexts,
            TechTexts=TechTexts,
            Items=Items,
            Prices=Prices,
            Categories=Categories,
            Images=Images,
            BrandId=BrandId,
            BrandName=BrandName,
            SupplierId=SupplierId,
            SupplierName=SupplierName,
            ParameterValues=ParameterValues,
            Variants=Variants,
            Markets=Markets,
            Vat=Vat,
            PrimaryImage=PrimaryImage,
            FreightClassId=FreightClassId,
            IntrastatCode=IntrastatCode,
            CountryOfOrigin=CountryOfOrigin,
            VariantGroupId=VariantGroupId,
            VatId=VatId,
            ExternalId=ExternalId,
            ActivationDate=ActivationDate,
            Feeds=Feeds,
            Urls=Urls,
            MainCategoryId=MainCategoryId,
            RelatedProducts=RelatedProducts,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.category_models_read_category import CategoryModelsReadCategory
from openapi_client.model.market_models_market import MarketModelsMarket
from openapi_client.model.price_list_models_read_price_list_price import PriceListModelsReadPriceListPrice
from openapi_client.model.product_models_read_feed_membership import ProductModelsReadFeedMembership
from openapi_client.model.product_models_read_image import ProductModelsReadImage
from openapi_client.model.product_models_read_product_item import ProductModelsReadProductItem
from openapi_client.model.product_models_read_product_url import ProductModelsReadProductUrl
from openapi_client.model.product_models_read_related_product import ProductModelsReadRelatedProduct
from openapi_client.model.product_parameter_models_read_product_parameter_value import ProductParameterModelsReadProductParameterValue
from openapi_client.model.shared_models_localizable_content import SharedModelsLocalizableContent
from openapi_client.model.variant_models_read_variant import VariantModelsReadVariant
