# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PriceListModelsReadPriceListPrice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A price for a product on a specific price list.
    """


    class MetaOapg:
        
        class properties:
            ProductId = schemas.Int32Schema
            PriceListId = schemas.Int32Schema
            PriceListName = schemas.StrSchema
            PriceIncVat = schemas.Float64Schema
            PriceExVat = schemas.Float64Schema
            VatRate = schemas.Float64Schema
            Country = schemas.StrSchema
            Currency = schemas.StrSchema
            StaggeredCount = schemas.Int32Schema
            ValidFrom = schemas.DateTimeSchema
            ValidTo = schemas.DateTimeSchema
            __annotations__ = {
                "ProductId": ProductId,
                "PriceListId": PriceListId,
                "PriceListName": PriceListName,
                "PriceIncVat": PriceIncVat,
                "PriceExVat": PriceExVat,
                "VatRate": VatRate,
                "Country": Country,
                "Currency": Currency,
                "StaggeredCount": StaggeredCount,
                "ValidFrom": ValidFrom,
                "ValidTo": ValidTo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProductId"]) -> MetaOapg.properties.ProductId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PriceListId"]) -> MetaOapg.properties.PriceListId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PriceListName"]) -> MetaOapg.properties.PriceListName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PriceIncVat"]) -> MetaOapg.properties.PriceIncVat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PriceExVat"]) -> MetaOapg.properties.PriceExVat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VatRate"]) -> MetaOapg.properties.VatRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Country"]) -> MetaOapg.properties.Country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Currency"]) -> MetaOapg.properties.Currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StaggeredCount"]) -> MetaOapg.properties.StaggeredCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ValidFrom"]) -> MetaOapg.properties.ValidFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ValidTo"]) -> MetaOapg.properties.ValidTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ProductId", "PriceListId", "PriceListName", "PriceIncVat", "PriceExVat", "VatRate", "Country", "Currency", "StaggeredCount", "ValidFrom", "ValidTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProductId"]) -> typing.Union[MetaOapg.properties.ProductId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PriceListId"]) -> typing.Union[MetaOapg.properties.PriceListId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PriceListName"]) -> typing.Union[MetaOapg.properties.PriceListName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PriceIncVat"]) -> typing.Union[MetaOapg.properties.PriceIncVat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PriceExVat"]) -> typing.Union[MetaOapg.properties.PriceExVat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VatRate"]) -> typing.Union[MetaOapg.properties.VatRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Country"]) -> typing.Union[MetaOapg.properties.Country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Currency"]) -> typing.Union[MetaOapg.properties.Currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StaggeredCount"]) -> typing.Union[MetaOapg.properties.StaggeredCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ValidFrom"]) -> typing.Union[MetaOapg.properties.ValidFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ValidTo"]) -> typing.Union[MetaOapg.properties.ValidTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ProductId", "PriceListId", "PriceListName", "PriceIncVat", "PriceExVat", "VatRate", "Country", "Currency", "StaggeredCount", "ValidFrom", "ValidTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ProductId: typing.Union[MetaOapg.properties.ProductId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PriceListId: typing.Union[MetaOapg.properties.PriceListId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PriceListName: typing.Union[MetaOapg.properties.PriceListName, str, schemas.Unset] = schemas.unset,
        PriceIncVat: typing.Union[MetaOapg.properties.PriceIncVat, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PriceExVat: typing.Union[MetaOapg.properties.PriceExVat, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        VatRate: typing.Union[MetaOapg.properties.VatRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Country: typing.Union[MetaOapg.properties.Country, str, schemas.Unset] = schemas.unset,
        Currency: typing.Union[MetaOapg.properties.Currency, str, schemas.Unset] = schemas.unset,
        StaggeredCount: typing.Union[MetaOapg.properties.StaggeredCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ValidFrom: typing.Union[MetaOapg.properties.ValidFrom, str, datetime, schemas.Unset] = schemas.unset,
        ValidTo: typing.Union[MetaOapg.properties.ValidTo, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PriceListModelsReadPriceListPrice':
        return super().__new__(
            cls,
            *_args,
            ProductId=ProductId,
            PriceListId=PriceListId,
            PriceListName=PriceListName,
            PriceIncVat=PriceIncVat,
            PriceExVat=PriceExVat,
            VatRate=VatRate,
            Country=Country,
            Currency=Currency,
            StaggeredCount=StaggeredCount,
            ValidFrom=ValidFrom,
            ValidTo=ValidTo,
            _configuration=_configuration,
            **kwargs,
        )
