# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProductModelsWriteProduct(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A product.
    """


    class MetaOapg:
        
        class properties:
            ArticleNumber = schemas.StrSchema
            
            
            class Names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            Active = schemas.BoolSchema
            PurchasePrice = schemas.Float64Schema
            PurchasePriceCurrency = schemas.StrSchema
            
            
            class ShortTexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ShortTexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            
            
            class LongTexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LongTexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            
            
            class TechTexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SharedModelsLocalizableContent']:
                        return SharedModelsLocalizableContent
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SharedModelsLocalizableContent'], typing.List['SharedModelsLocalizableContent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TechTexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SharedModelsLocalizableContent':
                    return super().__getitem__(i)
            BrandId = schemas.Int32Schema
            SupplierId = schemas.Int32Schema
            
            
            class Items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductModelsWriteProductItem']:
                        return ProductModelsWriteProductItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductModelsWriteProductItem'], typing.List['ProductModelsWriteProductItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductModelsWriteProductItem':
                    return super().__getitem__(i)
            
            
            class CategoryIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CategoryIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ParameterValues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProductParameterModelsWriteProductParameterValue']:
                        return ProductParameterModelsWriteProductParameterValue
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProductParameterModelsWriteProductParameterValue'], typing.List['ProductParameterModelsWriteProductParameterValue']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ParameterValues':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProductParameterModelsWriteProductParameterValue':
                    return super().__getitem__(i)
            
            
            class Variants(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VariantModelsWriteVariant']:
                        return VariantModelsWriteVariant
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['VariantModelsWriteVariant'], typing.List['VariantModelsWriteVariant']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Variants':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VariantModelsWriteVariant':
                    return super().__getitem__(i)
            
            
            class Markets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MarketModelsMarket']:
                        return MarketModelsMarket
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MarketModelsMarket'], typing.List['MarketModelsMarket']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Markets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MarketModelsMarket':
                    return super().__getitem__(i)
            FreightClassId = schemas.Int32Schema
            IntrastatCode = schemas.StrSchema
            CountryOfOrigin = schemas.StrSchema
            VariantGroupId = schemas.Int32Schema
            Vat = schemas.Int32Schema
            VatType = schemas.StrSchema
            ExternalId = schemas.StrSchema
            ActivationDate = schemas.DateTimeSchema
            __annotations__ = {
                "ArticleNumber": ArticleNumber,
                "Names": Names,
                "Active": Active,
                "PurchasePrice": PurchasePrice,
                "PurchasePriceCurrency": PurchasePriceCurrency,
                "ShortTexts": ShortTexts,
                "LongTexts": LongTexts,
                "TechTexts": TechTexts,
                "BrandId": BrandId,
                "SupplierId": SupplierId,
                "Items": Items,
                "CategoryIds": CategoryIds,
                "ParameterValues": ParameterValues,
                "Variants": Variants,
                "Markets": Markets,
                "FreightClassId": FreightClassId,
                "IntrastatCode": IntrastatCode,
                "CountryOfOrigin": CountryOfOrigin,
                "VariantGroupId": VariantGroupId,
                "Vat": Vat,
                "VatType": VatType,
                "ExternalId": ExternalId,
                "ActivationDate": ActivationDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ArticleNumber"]) -> MetaOapg.properties.ArticleNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Names"]) -> MetaOapg.properties.Names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Active"]) -> MetaOapg.properties.Active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PurchasePrice"]) -> MetaOapg.properties.PurchasePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PurchasePriceCurrency"]) -> MetaOapg.properties.PurchasePriceCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShortTexts"]) -> MetaOapg.properties.ShortTexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LongTexts"]) -> MetaOapg.properties.LongTexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TechTexts"]) -> MetaOapg.properties.TechTexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BrandId"]) -> MetaOapg.properties.BrandId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SupplierId"]) -> MetaOapg.properties.SupplierId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Items"]) -> MetaOapg.properties.Items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CategoryIds"]) -> MetaOapg.properties.CategoryIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ParameterValues"]) -> MetaOapg.properties.ParameterValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Variants"]) -> MetaOapg.properties.Variants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Markets"]) -> MetaOapg.properties.Markets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FreightClassId"]) -> MetaOapg.properties.FreightClassId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IntrastatCode"]) -> MetaOapg.properties.IntrastatCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CountryOfOrigin"]) -> MetaOapg.properties.CountryOfOrigin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VariantGroupId"]) -> MetaOapg.properties.VariantGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Vat"]) -> MetaOapg.properties.Vat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VatType"]) -> MetaOapg.properties.VatType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExternalId"]) -> MetaOapg.properties.ExternalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActivationDate"]) -> MetaOapg.properties.ActivationDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ArticleNumber", "Names", "Active", "PurchasePrice", "PurchasePriceCurrency", "ShortTexts", "LongTexts", "TechTexts", "BrandId", "SupplierId", "Items", "CategoryIds", "ParameterValues", "Variants", "Markets", "FreightClassId", "IntrastatCode", "CountryOfOrigin", "VariantGroupId", "Vat", "VatType", "ExternalId", "ActivationDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ArticleNumber"]) -> typing.Union[MetaOapg.properties.ArticleNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Names"]) -> typing.Union[MetaOapg.properties.Names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Active"]) -> typing.Union[MetaOapg.properties.Active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PurchasePrice"]) -> typing.Union[MetaOapg.properties.PurchasePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PurchasePriceCurrency"]) -> typing.Union[MetaOapg.properties.PurchasePriceCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShortTexts"]) -> typing.Union[MetaOapg.properties.ShortTexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LongTexts"]) -> typing.Union[MetaOapg.properties.LongTexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TechTexts"]) -> typing.Union[MetaOapg.properties.TechTexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BrandId"]) -> typing.Union[MetaOapg.properties.BrandId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SupplierId"]) -> typing.Union[MetaOapg.properties.SupplierId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Items"]) -> typing.Union[MetaOapg.properties.Items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CategoryIds"]) -> typing.Union[MetaOapg.properties.CategoryIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ParameterValues"]) -> typing.Union[MetaOapg.properties.ParameterValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Variants"]) -> typing.Union[MetaOapg.properties.Variants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Markets"]) -> typing.Union[MetaOapg.properties.Markets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FreightClassId"]) -> typing.Union[MetaOapg.properties.FreightClassId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IntrastatCode"]) -> typing.Union[MetaOapg.properties.IntrastatCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CountryOfOrigin"]) -> typing.Union[MetaOapg.properties.CountryOfOrigin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VariantGroupId"]) -> typing.Union[MetaOapg.properties.VariantGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Vat"]) -> typing.Union[MetaOapg.properties.Vat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VatType"]) -> typing.Union[MetaOapg.properties.VatType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExternalId"]) -> typing.Union[MetaOapg.properties.ExternalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActivationDate"]) -> typing.Union[MetaOapg.properties.ActivationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ArticleNumber", "Names", "Active", "PurchasePrice", "PurchasePriceCurrency", "ShortTexts", "LongTexts", "TechTexts", "BrandId", "SupplierId", "Items", "CategoryIds", "ParameterValues", "Variants", "Markets", "FreightClassId", "IntrastatCode", "CountryOfOrigin", "VariantGroupId", "Vat", "VatType", "ExternalId", "ActivationDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ArticleNumber: typing.Union[MetaOapg.properties.ArticleNumber, str, schemas.Unset] = schemas.unset,
        Names: typing.Union[MetaOapg.properties.Names, list, tuple, schemas.Unset] = schemas.unset,
        Active: typing.Union[MetaOapg.properties.Active, bool, schemas.Unset] = schemas.unset,
        PurchasePrice: typing.Union[MetaOapg.properties.PurchasePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PurchasePriceCurrency: typing.Union[MetaOapg.properties.PurchasePriceCurrency, str, schemas.Unset] = schemas.unset,
        ShortTexts: typing.Union[MetaOapg.properties.ShortTexts, list, tuple, schemas.Unset] = schemas.unset,
        LongTexts: typing.Union[MetaOapg.properties.LongTexts, list, tuple, schemas.Unset] = schemas.unset,
        TechTexts: typing.Union[MetaOapg.properties.TechTexts, list, tuple, schemas.Unset] = schemas.unset,
        BrandId: typing.Union[MetaOapg.properties.BrandId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SupplierId: typing.Union[MetaOapg.properties.SupplierId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Items: typing.Union[MetaOapg.properties.Items, list, tuple, schemas.Unset] = schemas.unset,
        CategoryIds: typing.Union[MetaOapg.properties.CategoryIds, list, tuple, schemas.Unset] = schemas.unset,
        ParameterValues: typing.Union[MetaOapg.properties.ParameterValues, list, tuple, schemas.Unset] = schemas.unset,
        Variants: typing.Union[MetaOapg.properties.Variants, list, tuple, schemas.Unset] = schemas.unset,
        Markets: typing.Union[MetaOapg.properties.Markets, list, tuple, schemas.Unset] = schemas.unset,
        FreightClassId: typing.Union[MetaOapg.properties.FreightClassId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IntrastatCode: typing.Union[MetaOapg.properties.IntrastatCode, str, schemas.Unset] = schemas.unset,
        CountryOfOrigin: typing.Union[MetaOapg.properties.CountryOfOrigin, str, schemas.Unset] = schemas.unset,
        VariantGroupId: typing.Union[MetaOapg.properties.VariantGroupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Vat: typing.Union[MetaOapg.properties.Vat, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        VatType: typing.Union[MetaOapg.properties.VatType, str, schemas.Unset] = schemas.unset,
        ExternalId: typing.Union[MetaOapg.properties.ExternalId, str, schemas.Unset] = schemas.unset,
        ActivationDate: typing.Union[MetaOapg.properties.ActivationDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductModelsWriteProduct':
        return super().__new__(
            cls,
            *_args,
            ArticleNumber=ArticleNumber,
            Names=Names,
            Active=Active,
            PurchasePrice=PurchasePrice,
            PurchasePriceCurrency=PurchasePriceCurrency,
            ShortTexts=ShortTexts,
            LongTexts=LongTexts,
            TechTexts=TechTexts,
            BrandId=BrandId,
            SupplierId=SupplierId,
            Items=Items,
            CategoryIds=CategoryIds,
            ParameterValues=ParameterValues,
            Variants=Variants,
            Markets=Markets,
            FreightClassId=FreightClassId,
            IntrastatCode=IntrastatCode,
            CountryOfOrigin=CountryOfOrigin,
            VariantGroupId=VariantGroupId,
            Vat=Vat,
            VatType=VatType,
            ExternalId=ExternalId,
            ActivationDate=ActivationDate,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.market_models_market import MarketModelsMarket
from openapi_client.model.product_models_write_product_item import ProductModelsWriteProductItem
from openapi_client.model.product_parameter_models_write_product_parameter_value import ProductParameterModelsWriteProductParameterValue
from openapi_client.model.shared_models_localizable_content import SharedModelsLocalizableContent
from openapi_client.model.variant_models_write_variant import VariantModelsWriteVariant
