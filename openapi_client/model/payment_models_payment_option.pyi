# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PaymentModelsPaymentOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            PaymentId = schemas.Int32Schema
            PaymentGroupId = schemas.Int32Schema
            Name = schemas.StrSchema
            DisplayName = schemas.StrSchema
            Fee = schemas.Float64Schema
            Icon = schemas.StrSchema
            Sort = schemas.Int32Schema
            Period = schemas.Int32Schema
            TermsLink = schemas.StrSchema
            InfoLink = schemas.StrSchema
            PersonalIdRequired = schemas.BoolSchema
            RegisteredAddressRequired = schemas.BoolSchema
            HouseNumberRequired = schemas.BoolSchema
            HouseExtensionShown = schemas.BoolSchema
            GenderRequired = schemas.BoolSchema
            BirthdateRequired = schemas.BoolSchema
            __annotations__ = {
                "PaymentId": PaymentId,
                "PaymentGroupId": PaymentGroupId,
                "Name": Name,
                "DisplayName": DisplayName,
                "Fee": Fee,
                "Icon": Icon,
                "Sort": Sort,
                "Period": Period,
                "TermsLink": TermsLink,
                "InfoLink": InfoLink,
                "PersonalIdRequired": PersonalIdRequired,
                "RegisteredAddressRequired": RegisteredAddressRequired,
                "HouseNumberRequired": HouseNumberRequired,
                "HouseExtensionShown": HouseExtensionShown,
                "GenderRequired": GenderRequired,
                "BirthdateRequired": BirthdateRequired,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentId"]) -> MetaOapg.properties.PaymentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentGroupId"]) -> MetaOapg.properties.PaymentGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DisplayName"]) -> MetaOapg.properties.DisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Fee"]) -> MetaOapg.properties.Fee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Icon"]) -> MetaOapg.properties.Icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sort"]) -> MetaOapg.properties.Sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Period"]) -> MetaOapg.properties.Period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TermsLink"]) -> MetaOapg.properties.TermsLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InfoLink"]) -> MetaOapg.properties.InfoLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PersonalIdRequired"]) -> MetaOapg.properties.PersonalIdRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RegisteredAddressRequired"]) -> MetaOapg.properties.RegisteredAddressRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HouseNumberRequired"]) -> MetaOapg.properties.HouseNumberRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HouseExtensionShown"]) -> MetaOapg.properties.HouseExtensionShown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GenderRequired"]) -> MetaOapg.properties.GenderRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BirthdateRequired"]) -> MetaOapg.properties.BirthdateRequired: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["PaymentId", "PaymentGroupId", "Name", "DisplayName", "Fee", "Icon", "Sort", "Period", "TermsLink", "InfoLink", "PersonalIdRequired", "RegisteredAddressRequired", "HouseNumberRequired", "HouseExtensionShown", "GenderRequired", "BirthdateRequired", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentId"]) -> typing.Union[MetaOapg.properties.PaymentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentGroupId"]) -> typing.Union[MetaOapg.properties.PaymentGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DisplayName"]) -> typing.Union[MetaOapg.properties.DisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Fee"]) -> typing.Union[MetaOapg.properties.Fee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Icon"]) -> typing.Union[MetaOapg.properties.Icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sort"]) -> typing.Union[MetaOapg.properties.Sort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Period"]) -> typing.Union[MetaOapg.properties.Period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TermsLink"]) -> typing.Union[MetaOapg.properties.TermsLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InfoLink"]) -> typing.Union[MetaOapg.properties.InfoLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PersonalIdRequired"]) -> typing.Union[MetaOapg.properties.PersonalIdRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RegisteredAddressRequired"]) -> typing.Union[MetaOapg.properties.RegisteredAddressRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HouseNumberRequired"]) -> typing.Union[MetaOapg.properties.HouseNumberRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HouseExtensionShown"]) -> typing.Union[MetaOapg.properties.HouseExtensionShown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GenderRequired"]) -> typing.Union[MetaOapg.properties.GenderRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BirthdateRequired"]) -> typing.Union[MetaOapg.properties.BirthdateRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["PaymentId", "PaymentGroupId", "Name", "DisplayName", "Fee", "Icon", "Sort", "Period", "TermsLink", "InfoLink", "PersonalIdRequired", "RegisteredAddressRequired", "HouseNumberRequired", "HouseExtensionShown", "GenderRequired", "BirthdateRequired", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        PaymentId: typing.Union[MetaOapg.properties.PaymentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PaymentGroupId: typing.Union[MetaOapg.properties.PaymentGroupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
        DisplayName: typing.Union[MetaOapg.properties.DisplayName, str, schemas.Unset] = schemas.unset,
        Fee: typing.Union[MetaOapg.properties.Fee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Icon: typing.Union[MetaOapg.properties.Icon, str, schemas.Unset] = schemas.unset,
        Sort: typing.Union[MetaOapg.properties.Sort, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Period: typing.Union[MetaOapg.properties.Period, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TermsLink: typing.Union[MetaOapg.properties.TermsLink, str, schemas.Unset] = schemas.unset,
        InfoLink: typing.Union[MetaOapg.properties.InfoLink, str, schemas.Unset] = schemas.unset,
        PersonalIdRequired: typing.Union[MetaOapg.properties.PersonalIdRequired, bool, schemas.Unset] = schemas.unset,
        RegisteredAddressRequired: typing.Union[MetaOapg.properties.RegisteredAddressRequired, bool, schemas.Unset] = schemas.unset,
        HouseNumberRequired: typing.Union[MetaOapg.properties.HouseNumberRequired, bool, schemas.Unset] = schemas.unset,
        HouseExtensionShown: typing.Union[MetaOapg.properties.HouseExtensionShown, bool, schemas.Unset] = schemas.unset,
        GenderRequired: typing.Union[MetaOapg.properties.GenderRequired, bool, schemas.Unset] = schemas.unset,
        BirthdateRequired: typing.Union[MetaOapg.properties.BirthdateRequired, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentModelsPaymentOption':
        return super().__new__(
            cls,
            *_args,
            PaymentId=PaymentId,
            PaymentGroupId=PaymentGroupId,
            Name=Name,
            DisplayName=DisplayName,
            Fee=Fee,
            Icon=Icon,
            Sort=Sort,
            Period=Period,
            TermsLink=TermsLink,
            InfoLink=InfoLink,
            PersonalIdRequired=PersonalIdRequired,
            RegisteredAddressRequired=RegisteredAddressRequired,
            HouseNumberRequired=HouseNumberRequired,
            HouseExtensionShown=HouseExtensionShown,
            GenderRequired=GenderRequired,
            BirthdateRequired=BirthdateRequired,
            _configuration=_configuration,
            **kwargs,
        )
