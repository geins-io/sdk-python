# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PageAreaModelsReadPageWidgetContainer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This class represents a collection of widgets, and defines how they should be layouted in the area they are rendered in.
    """


    class MetaOapg:
        
        class properties:
            Id = schemas.Int32Schema
            Name = schemas.StrSchema
            
            
            class ClassNames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ClassNames':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            Active = schemas.BoolSchema
            Layout = schemas.StrSchema
            ResponsiveMode = schemas.StrSchema
            Visibility = schemas.StrSchema
            Design = schemas.StrSchema
            
            
            class Widgets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PageAreaModelsReadPageWidget']:
                        return PageAreaModelsReadPageWidget
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PageAreaModelsReadPageWidget'], typing.List['PageAreaModelsReadPageWidget']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Widgets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PageAreaModelsReadPageWidget':
                    return super().__getitem__(i)
            __annotations__ = {
                "Id": Id,
                "Name": Name,
                "ClassNames": ClassNames,
                "Active": Active,
                "Layout": Layout,
                "ResponsiveMode": ResponsiveMode,
                "Visibility": Visibility,
                "Design": Design,
                "Widgets": Widgets,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Id"]) -> MetaOapg.properties.Id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClassNames"]) -> MetaOapg.properties.ClassNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Active"]) -> MetaOapg.properties.Active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Layout"]) -> MetaOapg.properties.Layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResponsiveMode"]) -> MetaOapg.properties.ResponsiveMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Visibility"]) -> MetaOapg.properties.Visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Design"]) -> MetaOapg.properties.Design: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Widgets"]) -> MetaOapg.properties.Widgets: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Id", "Name", "ClassNames", "Active", "Layout", "ResponsiveMode", "Visibility", "Design", "Widgets", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Id"]) -> typing.Union[MetaOapg.properties.Id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClassNames"]) -> typing.Union[MetaOapg.properties.ClassNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Active"]) -> typing.Union[MetaOapg.properties.Active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Layout"]) -> typing.Union[MetaOapg.properties.Layout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResponsiveMode"]) -> typing.Union[MetaOapg.properties.ResponsiveMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Visibility"]) -> typing.Union[MetaOapg.properties.Visibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Design"]) -> typing.Union[MetaOapg.properties.Design, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Widgets"]) -> typing.Union[MetaOapg.properties.Widgets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Id", "Name", "ClassNames", "Active", "Layout", "ResponsiveMode", "Visibility", "Design", "Widgets", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Id: typing.Union[MetaOapg.properties.Id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
        ClassNames: typing.Union[MetaOapg.properties.ClassNames, list, tuple, schemas.Unset] = schemas.unset,
        Active: typing.Union[MetaOapg.properties.Active, bool, schemas.Unset] = schemas.unset,
        Layout: typing.Union[MetaOapg.properties.Layout, str, schemas.Unset] = schemas.unset,
        ResponsiveMode: typing.Union[MetaOapg.properties.ResponsiveMode, str, schemas.Unset] = schemas.unset,
        Visibility: typing.Union[MetaOapg.properties.Visibility, str, schemas.Unset] = schemas.unset,
        Design: typing.Union[MetaOapg.properties.Design, str, schemas.Unset] = schemas.unset,
        Widgets: typing.Union[MetaOapg.properties.Widgets, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PageAreaModelsReadPageWidgetContainer':
        return super().__new__(
            cls,
            *_args,
            Id=Id,
            Name=Name,
            ClassNames=ClassNames,
            Active=Active,
            Layout=Layout,
            ResponsiveMode=ResponsiveMode,
            Visibility=Visibility,
            Design=Design,
            Widgets=Widgets,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.page_area_models_read_page_widget import PageAreaModelsReadPageWidget
