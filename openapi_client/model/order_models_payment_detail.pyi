# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderModelsPaymentDetail(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data carrier for a payment detail
    """


    class MetaOapg:
        
        class properties:
            Id = schemas.Int32Schema
            PaymentId = schemas.Int32Schema
            Name = schemas.StrSchema
            DisplayName = schemas.StrSchema
            TransactionId = schemas.StrSchema
            SecondaryTransactionId = schemas.StrSchema
            ReservationNumber = schemas.StrSchema
            ReservationDate = schemas.DateTimeSchema
            PaymentDate = schemas.DateTimeSchema
            Total = schemas.Float64Schema
            Payed = schemas.BoolSchema
            PaymentFee = schemas.Float64Schema
            ShippingFee = schemas.Float64Schema
            PaymentOption = schemas.StrSchema
            __annotations__ = {
                "Id": Id,
                "PaymentId": PaymentId,
                "Name": Name,
                "DisplayName": DisplayName,
                "TransactionId": TransactionId,
                "SecondaryTransactionId": SecondaryTransactionId,
                "ReservationNumber": ReservationNumber,
                "ReservationDate": ReservationDate,
                "PaymentDate": PaymentDate,
                "Total": Total,
                "Payed": Payed,
                "PaymentFee": PaymentFee,
                "ShippingFee": ShippingFee,
                "PaymentOption": PaymentOption,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Id"]) -> MetaOapg.properties.Id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentId"]) -> MetaOapg.properties.PaymentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DisplayName"]) -> MetaOapg.properties.DisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionId"]) -> MetaOapg.properties.TransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecondaryTransactionId"]) -> MetaOapg.properties.SecondaryTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReservationNumber"]) -> MetaOapg.properties.ReservationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReservationDate"]) -> MetaOapg.properties.ReservationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentDate"]) -> MetaOapg.properties.PaymentDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Total"]) -> MetaOapg.properties.Total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Payed"]) -> MetaOapg.properties.Payed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentFee"]) -> MetaOapg.properties.PaymentFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShippingFee"]) -> MetaOapg.properties.ShippingFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentOption"]) -> MetaOapg.properties.PaymentOption: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Id", "PaymentId", "Name", "DisplayName", "TransactionId", "SecondaryTransactionId", "ReservationNumber", "ReservationDate", "PaymentDate", "Total", "Payed", "PaymentFee", "ShippingFee", "PaymentOption", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Id"]) -> typing.Union[MetaOapg.properties.Id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentId"]) -> typing.Union[MetaOapg.properties.PaymentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DisplayName"]) -> typing.Union[MetaOapg.properties.DisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionId"]) -> typing.Union[MetaOapg.properties.TransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecondaryTransactionId"]) -> typing.Union[MetaOapg.properties.SecondaryTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReservationNumber"]) -> typing.Union[MetaOapg.properties.ReservationNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReservationDate"]) -> typing.Union[MetaOapg.properties.ReservationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentDate"]) -> typing.Union[MetaOapg.properties.PaymentDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Total"]) -> typing.Union[MetaOapg.properties.Total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Payed"]) -> typing.Union[MetaOapg.properties.Payed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentFee"]) -> typing.Union[MetaOapg.properties.PaymentFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShippingFee"]) -> typing.Union[MetaOapg.properties.ShippingFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentOption"]) -> typing.Union[MetaOapg.properties.PaymentOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Id", "PaymentId", "Name", "DisplayName", "TransactionId", "SecondaryTransactionId", "ReservationNumber", "ReservationDate", "PaymentDate", "Total", "Payed", "PaymentFee", "ShippingFee", "PaymentOption", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Id: typing.Union[MetaOapg.properties.Id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PaymentId: typing.Union[MetaOapg.properties.PaymentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
        DisplayName: typing.Union[MetaOapg.properties.DisplayName, str, schemas.Unset] = schemas.unset,
        TransactionId: typing.Union[MetaOapg.properties.TransactionId, str, schemas.Unset] = schemas.unset,
        SecondaryTransactionId: typing.Union[MetaOapg.properties.SecondaryTransactionId, str, schemas.Unset] = schemas.unset,
        ReservationNumber: typing.Union[MetaOapg.properties.ReservationNumber, str, schemas.Unset] = schemas.unset,
        ReservationDate: typing.Union[MetaOapg.properties.ReservationDate, str, datetime, schemas.Unset] = schemas.unset,
        PaymentDate: typing.Union[MetaOapg.properties.PaymentDate, str, datetime, schemas.Unset] = schemas.unset,
        Total: typing.Union[MetaOapg.properties.Total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Payed: typing.Union[MetaOapg.properties.Payed, bool, schemas.Unset] = schemas.unset,
        PaymentFee: typing.Union[MetaOapg.properties.PaymentFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ShippingFee: typing.Union[MetaOapg.properties.ShippingFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PaymentOption: typing.Union[MetaOapg.properties.PaymentOption, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderModelsPaymentDetail':
        return super().__new__(
            cls,
            *_args,
            Id=Id,
            PaymentId=PaymentId,
            Name=Name,
            DisplayName=DisplayName,
            TransactionId=TransactionId,
            SecondaryTransactionId=SecondaryTransactionId,
            ReservationNumber=ReservationNumber,
            ReservationDate=ReservationDate,
            PaymentDate=PaymentDate,
            Total=Total,
            Payed=Payed,
            PaymentFee=PaymentFee,
            ShippingFee=ShippingFee,
            PaymentOption=PaymentOption,
            _configuration=_configuration,
            **kwargs,
        )
