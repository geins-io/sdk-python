# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderModelsOrderQuery(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data carrying class for order queries
    """


    class MetaOapg:
        
        class properties:
            Updated = schemas.DateTimeSchema
            StatusList = schemas.StrSchema
            MarketId = schemas.Int32Schema
            PaymentName = schemas.StrSchema
            ParcelGroupId = schemas.Int32Schema
            CustomerId = schemas.Int32Schema
            Email = schemas.StrSchema
            Include = schemas.StrSchema
            ExternalOrderStatus = schemas.Int32Schema
            CombineProductContainerRows = schemas.BoolSchema
            PackingLocationId = schemas.Int32Schema
            __annotations__ = {
                "Updated": Updated,
                "StatusList": StatusList,
                "MarketId": MarketId,
                "PaymentName": PaymentName,
                "ParcelGroupId": ParcelGroupId,
                "CustomerId": CustomerId,
                "Email": Email,
                "Include": Include,
                "ExternalOrderStatus": ExternalOrderStatus,
                "CombineProductContainerRows": CombineProductContainerRows,
                "PackingLocationId": PackingLocationId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Updated"]) -> MetaOapg.properties.Updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatusList"]) -> MetaOapg.properties.StatusList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarketId"]) -> MetaOapg.properties.MarketId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentName"]) -> MetaOapg.properties.PaymentName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ParcelGroupId"]) -> MetaOapg.properties.ParcelGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomerId"]) -> MetaOapg.properties.CustomerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Include"]) -> MetaOapg.properties.Include: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExternalOrderStatus"]) -> MetaOapg.properties.ExternalOrderStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CombineProductContainerRows"]) -> MetaOapg.properties.CombineProductContainerRows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PackingLocationId"]) -> MetaOapg.properties.PackingLocationId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Updated", "StatusList", "MarketId", "PaymentName", "ParcelGroupId", "CustomerId", "Email", "Include", "ExternalOrderStatus", "CombineProductContainerRows", "PackingLocationId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Updated"]) -> typing.Union[MetaOapg.properties.Updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatusList"]) -> typing.Union[MetaOapg.properties.StatusList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarketId"]) -> typing.Union[MetaOapg.properties.MarketId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentName"]) -> typing.Union[MetaOapg.properties.PaymentName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ParcelGroupId"]) -> typing.Union[MetaOapg.properties.ParcelGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomerId"]) -> typing.Union[MetaOapg.properties.CustomerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Include"]) -> typing.Union[MetaOapg.properties.Include, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExternalOrderStatus"]) -> typing.Union[MetaOapg.properties.ExternalOrderStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CombineProductContainerRows"]) -> typing.Union[MetaOapg.properties.CombineProductContainerRows, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PackingLocationId"]) -> typing.Union[MetaOapg.properties.PackingLocationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Updated", "StatusList", "MarketId", "PaymentName", "ParcelGroupId", "CustomerId", "Email", "Include", "ExternalOrderStatus", "CombineProductContainerRows", "PackingLocationId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Updated: typing.Union[MetaOapg.properties.Updated, str, datetime, schemas.Unset] = schemas.unset,
        StatusList: typing.Union[MetaOapg.properties.StatusList, str, schemas.Unset] = schemas.unset,
        MarketId: typing.Union[MetaOapg.properties.MarketId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PaymentName: typing.Union[MetaOapg.properties.PaymentName, str, schemas.Unset] = schemas.unset,
        ParcelGroupId: typing.Union[MetaOapg.properties.ParcelGroupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CustomerId: typing.Union[MetaOapg.properties.CustomerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        Include: typing.Union[MetaOapg.properties.Include, str, schemas.Unset] = schemas.unset,
        ExternalOrderStatus: typing.Union[MetaOapg.properties.ExternalOrderStatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CombineProductContainerRows: typing.Union[MetaOapg.properties.CombineProductContainerRows, bool, schemas.Unset] = schemas.unset,
        PackingLocationId: typing.Union[MetaOapg.properties.PackingLocationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderModelsOrderQuery':
        return super().__new__(
            cls,
            *_args,
            Updated=Updated,
            StatusList=StatusList,
            MarketId=MarketId,
            PaymentName=PaymentName,
            ParcelGroupId=ParcelGroupId,
            CustomerId=CustomerId,
            Email=Email,
            Include=Include,
            ExternalOrderStatus=ExternalOrderStatus,
            CombineProductContainerRows=CombineProductContainerRows,
            PackingLocationId=PackingLocationId,
            _configuration=_configuration,
            **kwargs,
        )
