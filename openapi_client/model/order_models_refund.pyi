# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderModelsRefund(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data carrier for a refund
    """


    class MetaOapg:
        
        class properties:
            Id = schemas.Int32Schema
            OrderRowId = schemas.Int32Schema
            PaymentDetailId = schemas.Int32Schema
            ReturnId = schemas.Int32Schema
            ArticleNumber = schemas.StrSchema
            CreatedAt = schemas.DateTimeSchema
            Total = schemas.Float64Schema
            ReasonCode = schemas.Int32Schema
            Reason = schemas.StrSchema
            ToBalance = schemas.BoolSchema
            Vat = schemas.Float64Schema
            ItemId = schemas.Int32Schema
            RefundType = schemas.StrSchema
            __annotations__ = {
                "Id": Id,
                "OrderRowId": OrderRowId,
                "PaymentDetailId": PaymentDetailId,
                "ReturnId": ReturnId,
                "ArticleNumber": ArticleNumber,
                "CreatedAt": CreatedAt,
                "Total": Total,
                "ReasonCode": ReasonCode,
                "Reason": Reason,
                "ToBalance": ToBalance,
                "Vat": Vat,
                "ItemId": ItemId,
                "RefundType": RefundType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Id"]) -> MetaOapg.properties.Id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderRowId"]) -> MetaOapg.properties.OrderRowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentDetailId"]) -> MetaOapg.properties.PaymentDetailId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReturnId"]) -> MetaOapg.properties.ReturnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ArticleNumber"]) -> MetaOapg.properties.ArticleNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Total"]) -> MetaOapg.properties.Total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReasonCode"]) -> MetaOapg.properties.ReasonCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Reason"]) -> MetaOapg.properties.Reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ToBalance"]) -> MetaOapg.properties.ToBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Vat"]) -> MetaOapg.properties.Vat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ItemId"]) -> MetaOapg.properties.ItemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefundType"]) -> MetaOapg.properties.RefundType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Id", "OrderRowId", "PaymentDetailId", "ReturnId", "ArticleNumber", "CreatedAt", "Total", "ReasonCode", "Reason", "ToBalance", "Vat", "ItemId", "RefundType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Id"]) -> typing.Union[MetaOapg.properties.Id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderRowId"]) -> typing.Union[MetaOapg.properties.OrderRowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentDetailId"]) -> typing.Union[MetaOapg.properties.PaymentDetailId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReturnId"]) -> typing.Union[MetaOapg.properties.ReturnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ArticleNumber"]) -> typing.Union[MetaOapg.properties.ArticleNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Total"]) -> typing.Union[MetaOapg.properties.Total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReasonCode"]) -> typing.Union[MetaOapg.properties.ReasonCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Reason"]) -> typing.Union[MetaOapg.properties.Reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ToBalance"]) -> typing.Union[MetaOapg.properties.ToBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Vat"]) -> typing.Union[MetaOapg.properties.Vat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ItemId"]) -> typing.Union[MetaOapg.properties.ItemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefundType"]) -> typing.Union[MetaOapg.properties.RefundType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Id", "OrderRowId", "PaymentDetailId", "ReturnId", "ArticleNumber", "CreatedAt", "Total", "ReasonCode", "Reason", "ToBalance", "Vat", "ItemId", "RefundType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Id: typing.Union[MetaOapg.properties.Id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OrderRowId: typing.Union[MetaOapg.properties.OrderRowId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PaymentDetailId: typing.Union[MetaOapg.properties.PaymentDetailId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ReturnId: typing.Union[MetaOapg.properties.ReturnId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ArticleNumber: typing.Union[MetaOapg.properties.ArticleNumber, str, schemas.Unset] = schemas.unset,
        CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, str, datetime, schemas.Unset] = schemas.unset,
        Total: typing.Union[MetaOapg.properties.Total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ReasonCode: typing.Union[MetaOapg.properties.ReasonCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Reason: typing.Union[MetaOapg.properties.Reason, str, schemas.Unset] = schemas.unset,
        ToBalance: typing.Union[MetaOapg.properties.ToBalance, bool, schemas.Unset] = schemas.unset,
        Vat: typing.Union[MetaOapg.properties.Vat, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ItemId: typing.Union[MetaOapg.properties.ItemId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        RefundType: typing.Union[MetaOapg.properties.RefundType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderModelsRefund':
        return super().__new__(
            cls,
            *_args,
            Id=Id,
            OrderRowId=OrderRowId,
            PaymentDetailId=PaymentDetailId,
            ReturnId=ReturnId,
            ArticleNumber=ArticleNumber,
            CreatedAt=CreatedAt,
            Total=Total,
            ReasonCode=ReasonCode,
            Reason=Reason,
            ToBalance=ToBalance,
            Vat=Vat,
            ItemId=ItemId,
            RefundType=RefundType,
            _configuration=_configuration,
            **kwargs,
        )
