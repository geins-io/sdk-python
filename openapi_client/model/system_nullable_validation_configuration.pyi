# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SystemNullableValidationConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def LazyLoadConfiguration() -> typing.Type['PageWidgetLazyLoadSetupLazyLoadConfiguration']:
                return PageWidgetLazyLoadSetupLazyLoadConfiguration
            
            
            class LazyLoadCollectionConfigurations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PageWidgetLazyLoadSetupLazyLoadCollectionConfiguration']:
                        return PageWidgetLazyLoadSetupLazyLoadCollectionConfiguration
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PageWidgetLazyLoadSetupLazyLoadCollectionConfiguration'], typing.List['PageWidgetLazyLoadSetupLazyLoadCollectionConfiguration']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LazyLoadCollectionConfigurations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PageWidgetLazyLoadSetupLazyLoadCollectionConfiguration':
                    return super().__getitem__(i)
            
            
            class WidgetRestrictions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['WidgetRestrictionSetupWidgetRestrictionConfiguration']:
                        return WidgetRestrictionSetupWidgetRestrictionConfiguration
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'WidgetRestrictionSetupWidgetRestrictionConfiguration':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'WidgetRestrictionSetupWidgetRestrictionConfiguration':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'WidgetRestrictionSetupWidgetRestrictionConfiguration',
                ) -> 'WidgetRestrictions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def ContainerRestrictions() -> typing.Type['ContainerRestrictionSetupContainerRestrictionConfiguration']:
                return ContainerRestrictionSetupContainerRestrictionConfiguration
            __annotations__ = {
                "LazyLoadConfiguration": LazyLoadConfiguration,
                "LazyLoadCollectionConfigurations": LazyLoadCollectionConfigurations,
                "WidgetRestrictions": WidgetRestrictions,
                "ContainerRestrictions": ContainerRestrictions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LazyLoadConfiguration"]) -> 'PageWidgetLazyLoadSetupLazyLoadConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LazyLoadCollectionConfigurations"]) -> MetaOapg.properties.LazyLoadCollectionConfigurations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WidgetRestrictions"]) -> MetaOapg.properties.WidgetRestrictions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ContainerRestrictions"]) -> 'ContainerRestrictionSetupContainerRestrictionConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["LazyLoadConfiguration", "LazyLoadCollectionConfigurations", "WidgetRestrictions", "ContainerRestrictions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LazyLoadConfiguration"]) -> typing.Union['PageWidgetLazyLoadSetupLazyLoadConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LazyLoadCollectionConfigurations"]) -> typing.Union[MetaOapg.properties.LazyLoadCollectionConfigurations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WidgetRestrictions"]) -> typing.Union[MetaOapg.properties.WidgetRestrictions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ContainerRestrictions"]) -> typing.Union['ContainerRestrictionSetupContainerRestrictionConfiguration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["LazyLoadConfiguration", "LazyLoadCollectionConfigurations", "WidgetRestrictions", "ContainerRestrictions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        LazyLoadConfiguration: typing.Union['PageWidgetLazyLoadSetupLazyLoadConfiguration', schemas.Unset] = schemas.unset,
        LazyLoadCollectionConfigurations: typing.Union[MetaOapg.properties.LazyLoadCollectionConfigurations, list, tuple, schemas.Unset] = schemas.unset,
        WidgetRestrictions: typing.Union[MetaOapg.properties.WidgetRestrictions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ContainerRestrictions: typing.Union['ContainerRestrictionSetupContainerRestrictionConfiguration', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SystemNullableValidationConfiguration':
        return super().__new__(
            cls,
            *_args,
            LazyLoadConfiguration=LazyLoadConfiguration,
            LazyLoadCollectionConfigurations=LazyLoadCollectionConfigurations,
            WidgetRestrictions=WidgetRestrictions,
            ContainerRestrictions=ContainerRestrictions,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.container_restriction_setup_container_restriction_configuration import ContainerRestrictionSetupContainerRestrictionConfiguration
from openapi_client.model.page_widget_lazy_load_setup_lazy_load_collection_configuration import PageWidgetLazyLoadSetupLazyLoadCollectionConfiguration
from openapi_client.model.page_widget_lazy_load_setup_lazy_load_configuration import PageWidgetLazyLoadSetupLazyLoadConfiguration
from openapi_client.model.widget_restriction_setup_widget_restriction_configuration import WidgetRestrictionSetupWidgetRestrictionConfiguration
