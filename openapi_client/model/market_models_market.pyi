# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MarketModelsMarket(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Id = schemas.Int32Schema
            Name = schemas.StrSchema
            DisplayName = schemas.StrSchema
            Currency = schemas.StrSchema
            VatRate = schemas.Float64Schema
            MarketPrefix = schemas.StrSchema
            CountryId = schemas.Int32Schema
            CurrencyId = schemas.Int32Schema
            CurrencyRate = schemas.Float64Schema
            LanguageId = schemas.Int32Schema
            Language = schemas.StrSchema
            __annotations__ = {
                "Id": Id,
                "Name": Name,
                "DisplayName": DisplayName,
                "Currency": Currency,
                "VatRate": VatRate,
                "MarketPrefix": MarketPrefix,
                "CountryId": CountryId,
                "CurrencyId": CurrencyId,
                "CurrencyRate": CurrencyRate,
                "LanguageId": LanguageId,
                "Language": Language,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Id"]) -> MetaOapg.properties.Id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DisplayName"]) -> MetaOapg.properties.DisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Currency"]) -> MetaOapg.properties.Currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VatRate"]) -> MetaOapg.properties.VatRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarketPrefix"]) -> MetaOapg.properties.MarketPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CountryId"]) -> MetaOapg.properties.CountryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrencyId"]) -> MetaOapg.properties.CurrencyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrencyRate"]) -> MetaOapg.properties.CurrencyRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LanguageId"]) -> MetaOapg.properties.LanguageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Id", "Name", "DisplayName", "Currency", "VatRate", "MarketPrefix", "CountryId", "CurrencyId", "CurrencyRate", "LanguageId", "Language", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Id"]) -> typing.Union[MetaOapg.properties.Id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DisplayName"]) -> typing.Union[MetaOapg.properties.DisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Currency"]) -> typing.Union[MetaOapg.properties.Currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VatRate"]) -> typing.Union[MetaOapg.properties.VatRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarketPrefix"]) -> typing.Union[MetaOapg.properties.MarketPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CountryId"]) -> typing.Union[MetaOapg.properties.CountryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrencyId"]) -> typing.Union[MetaOapg.properties.CurrencyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrencyRate"]) -> typing.Union[MetaOapg.properties.CurrencyRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LanguageId"]) -> typing.Union[MetaOapg.properties.LanguageId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> typing.Union[MetaOapg.properties.Language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Id", "Name", "DisplayName", "Currency", "VatRate", "MarketPrefix", "CountryId", "CurrencyId", "CurrencyRate", "LanguageId", "Language", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Id: typing.Union[MetaOapg.properties.Id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, str, schemas.Unset] = schemas.unset,
        DisplayName: typing.Union[MetaOapg.properties.DisplayName, str, schemas.Unset] = schemas.unset,
        Currency: typing.Union[MetaOapg.properties.Currency, str, schemas.Unset] = schemas.unset,
        VatRate: typing.Union[MetaOapg.properties.VatRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        MarketPrefix: typing.Union[MetaOapg.properties.MarketPrefix, str, schemas.Unset] = schemas.unset,
        CountryId: typing.Union[MetaOapg.properties.CountryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CurrencyId: typing.Union[MetaOapg.properties.CurrencyId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CurrencyRate: typing.Union[MetaOapg.properties.CurrencyRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        LanguageId: typing.Union[MetaOapg.properties.LanguageId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Language: typing.Union[MetaOapg.properties.Language, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarketModelsMarket':
        return super().__new__(
            cls,
            *_args,
            Id=Id,
            Name=Name,
            DisplayName=DisplayName,
            Currency=Currency,
            VatRate=VatRate,
            MarketPrefix=MarketPrefix,
            CountryId=CountryId,
            CurrencyId=CurrencyId,
            CurrencyRate=CurrencyRate,
            LanguageId=LanguageId,
            Language=Language,
            _configuration=_configuration,
            **kwargs,
        )
