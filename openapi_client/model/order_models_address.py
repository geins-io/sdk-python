# coding: utf-8

"""
    Geins Management API

     Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth`   # noqa: E501

    The version of the OpenAPI document: v1.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderModelsAddress(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Data carrier for an address
    """


    class MetaOapg:
        
        class properties:
            Company = schemas.StrSchema
            CareOf = schemas.StrSchema
            State = schemas.StrSchema
            Country = schemas.StrSchema
            FirstName = schemas.StrSchema
            LastName = schemas.StrSchema
            Email = schemas.StrSchema
            AddressLine1 = schemas.StrSchema
            AddressLine2 = schemas.StrSchema
            AddressLine3 = schemas.StrSchema
            Zip = schemas.StrSchema
            City = schemas.StrSchema
            Phone = schemas.StrSchema
            Mobile = schemas.StrSchema
            EntryCode = schemas.StrSchema
            __annotations__ = {
                "Company": Company,
                "CareOf": CareOf,
                "State": State,
                "Country": Country,
                "FirstName": FirstName,
                "LastName": LastName,
                "Email": Email,
                "AddressLine1": AddressLine1,
                "AddressLine2": AddressLine2,
                "AddressLine3": AddressLine3,
                "Zip": Zip,
                "City": City,
                "Phone": Phone,
                "Mobile": Mobile,
                "EntryCode": EntryCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Company"]) -> MetaOapg.properties.Company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CareOf"]) -> MetaOapg.properties.CareOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["State"]) -> MetaOapg.properties.State: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Country"]) -> MetaOapg.properties.Country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FirstName"]) -> MetaOapg.properties.FirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastName"]) -> MetaOapg.properties.LastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine1"]) -> MetaOapg.properties.AddressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine2"]) -> MetaOapg.properties.AddressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine3"]) -> MetaOapg.properties.AddressLine3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Zip"]) -> MetaOapg.properties.Zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["City"]) -> MetaOapg.properties.City: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Phone"]) -> MetaOapg.properties.Phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Mobile"]) -> MetaOapg.properties.Mobile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EntryCode"]) -> MetaOapg.properties.EntryCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Company", "CareOf", "State", "Country", "FirstName", "LastName", "Email", "AddressLine1", "AddressLine2", "AddressLine3", "Zip", "City", "Phone", "Mobile", "EntryCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Company"]) -> typing.Union[MetaOapg.properties.Company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CareOf"]) -> typing.Union[MetaOapg.properties.CareOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union[MetaOapg.properties.State, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Country"]) -> typing.Union[MetaOapg.properties.Country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FirstName"]) -> typing.Union[MetaOapg.properties.FirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastName"]) -> typing.Union[MetaOapg.properties.LastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine1"]) -> typing.Union[MetaOapg.properties.AddressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine2"]) -> typing.Union[MetaOapg.properties.AddressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine3"]) -> typing.Union[MetaOapg.properties.AddressLine3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Zip"]) -> typing.Union[MetaOapg.properties.Zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["City"]) -> typing.Union[MetaOapg.properties.City, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Phone"]) -> typing.Union[MetaOapg.properties.Phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Mobile"]) -> typing.Union[MetaOapg.properties.Mobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EntryCode"]) -> typing.Union[MetaOapg.properties.EntryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Company", "CareOf", "State", "Country", "FirstName", "LastName", "Email", "AddressLine1", "AddressLine2", "AddressLine3", "Zip", "City", "Phone", "Mobile", "EntryCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Company: typing.Union[MetaOapg.properties.Company, str, schemas.Unset] = schemas.unset,
        CareOf: typing.Union[MetaOapg.properties.CareOf, str, schemas.Unset] = schemas.unset,
        State: typing.Union[MetaOapg.properties.State, str, schemas.Unset] = schemas.unset,
        Country: typing.Union[MetaOapg.properties.Country, str, schemas.Unset] = schemas.unset,
        FirstName: typing.Union[MetaOapg.properties.FirstName, str, schemas.Unset] = schemas.unset,
        LastName: typing.Union[MetaOapg.properties.LastName, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        AddressLine1: typing.Union[MetaOapg.properties.AddressLine1, str, schemas.Unset] = schemas.unset,
        AddressLine2: typing.Union[MetaOapg.properties.AddressLine2, str, schemas.Unset] = schemas.unset,
        AddressLine3: typing.Union[MetaOapg.properties.AddressLine3, str, schemas.Unset] = schemas.unset,
        Zip: typing.Union[MetaOapg.properties.Zip, str, schemas.Unset] = schemas.unset,
        City: typing.Union[MetaOapg.properties.City, str, schemas.Unset] = schemas.unset,
        Phone: typing.Union[MetaOapg.properties.Phone, str, schemas.Unset] = schemas.unset,
        Mobile: typing.Union[MetaOapg.properties.Mobile, str, schemas.Unset] = schemas.unset,
        EntryCode: typing.Union[MetaOapg.properties.EntryCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderModelsAddress':
        return super().__new__(
            cls,
            *_args,
            Company=Company,
            CareOf=CareOf,
            State=State,
            Country=Country,
            FirstName=FirstName,
            LastName=LastName,
            Email=Email,
            AddressLine1=AddressLine1,
            AddressLine2=AddressLine2,
            AddressLine3=AddressLine3,
            Zip=Zip,
            City=City,
            Phone=Phone,
            Mobile=Mobile,
            EntryCode=EntryCode,
            _configuration=_configuration,
            **kwargs,
        )
